{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 04269a9d8cdc80a1d08b","webpack:///./node_modules/cross-domain-utils/src/util.js","webpack:///./node_modules/cross-domain-utils/src/constants.js","webpack:///./node_modules/cross-domain-utils/src/utils.js","webpack:///./node_modules/zalgo-promise/src/utils.js","webpack:///./node_modules/zalgo-promise/src/exceptions.js","webpack:///./node_modules/zalgo-promise/src/flush.js","webpack:///./node_modules/zalgo-promise/src/promise.js","webpack:///./node_modules/cross-domain-safe-weakmap/src/util.js","webpack:///./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack:///./node_modules/cross-domain-safe-weakmap/src/native.js","webpack:///./node_modules/belter/src/util.js","webpack:///./node_modules/belter/src/dom.js","webpack:///./src/conf/constants.js","webpack:///./src/conf/config.js","webpack:///./src/global.js","webpack:///./src/lib/hello.js","webpack:///./src/lib/windows.js","webpack:///./node_modules/universal-serialize/src/constants.js","webpack:///./node_modules/universal-serialize/src/common.js","webpack:///./node_modules/universal-serialize/src/serialize.js","webpack:///./node_modules/universal-serialize/src/serializers/function.js","webpack:///./node_modules/universal-serialize/src/serializers/error.js","webpack:///./node_modules/universal-serialize/src/serializers/promise.js","webpack:///./node_modules/universal-serialize/src/serializers/regex.js","webpack:///./node_modules/universal-serialize/src/serializers/date.js","webpack:///./node_modules/universal-serialize/src/serializers/array.js","webpack:///./node_modules/universal-serialize/src/serializers/object.js","webpack:///./node_modules/universal-serialize/src/serializers/string.js","webpack:///./node_modules/universal-serialize/src/serializers/number.js","webpack:///./node_modules/universal-serialize/src/serializers/boolean.js","webpack:///./node_modules/universal-serialize/src/serializers/null.js","webpack:///./node_modules/universal-serialize/src/deserialize.js","webpack:///./src/serialize/window.js","webpack:///./src/serialize/function.js","webpack:///./src/serialize/serialize.js","webpack:///./src/serialize/promise.js","webpack:///./src/drivers/send/strategies.js","webpack:///./src/drivers/send/index.js","webpack:///./src/drivers/listeners.js","webpack:///./src/drivers/receive/types.js","webpack:///./src/drivers/receive/index.js","webpack:///./src/public/client.js","webpack:///./src/public/server.js","webpack:///./src/public/config.js","webpack:///./src/public/index.js","webpack:///./src/clean.js","webpack:///./src/interface.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","isRegex","item","toString","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","IE_WIN_ACCESS_ERROR","isAboutProtocol","arguments","length","undefined","window","location","protocol","getParent","win","parent","err","getOpener","opener","canReadFromWindow","href","getActualDomain","Error","host","getDomain","domain","mockDomain","indexOf","isActuallySameDomain","desc","getOwnPropertyDescriptor","isSameDomain","isAncestorParent","child","childParent","result","push","getParents","getFrames","frames","len","frame","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","top","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getAncestor","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","isWindow","obj","Window","__cross_domain_utils_window_check__","isPromise","Promise","constructor","then","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushPromise","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","_this","_classCallCheck","resolved","rejected","errorHandled","handlers","error","isAsync","res","reject","value","dispatch","_this2","setTimeout","j","dispatchPossiblyUnhandledError","asyncReject","_this3","dispatching","_loop","_handlers$i","onSuccess","onError","onFinally","timeout","time","_this4","clearTimeout","toPromise","TypeError","all","promises","count","results","_loop2","prom","hash","keys","map","key","items","method","onPossiblyUnhandledException","cancel","splice","context","args","apply","delay","flush","counter","Date","now","CrossDomainSafeWeakMap","weakmap__classCallCheck","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","weakmap","values","_cleanupClosedWindows","isSafeToReadWrite","entry","writable","index","has","getOrSet","uniqueID","chars","replace","charAt","floor","str","btoa","Buffer","from","base64encode","toISOString","slice","toLowerCase","objectIDs","noop","once","called","val","create","MESSAGE_TYPE","REQUEST","RESPONSE","ACK","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","WINDOW_PROP","POSTROBOT","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","CONFIG","BRIDGE_TIMEOUT","CHILD_WINDOW_TIMEOUT","ACK_TIMEOUT","ACK_TIMEOUT_KNOWN","RES_TIMEOUT","ALLOWED_POST_MESSAGE_METHODS","_ALLOWED_POST_MESSAGE","global","winStore","windowStore","getObj","defStore","getStore","defVal","store","del","globalStore","storeKey","reset","instanceID","helloPromises","getHelloPromise","listenForHello","on","_ref","source","sayHello","send","_ref2","data","getWindowInstanceID","_ref3","arg","_this5","knownWindows","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","common__typeof","__type__","determineType","serializeType","type","__val__","SERIALIZER","_SERIALIZER","stack","code","toJSON","defaultSerializers","DESERIALIZER","_DESERIALIZER","RegExp","defaultDeserializers","winToProxyWindow","idToProxyWindow","cleanupProxyWindows","_i2","_idToProxyWindow$keys2","_length2","id","shouldClean","ProxyWindow","serializedWindow","actualWindow","window__classCallCheck","isProxyWindow","actualWindowPromise","setWindow","getInstanceID","cache","memoizedPromiseFunction","_len2","_key2","subkey","_typeof","uid","getObjectID","serializeArgs","memoizePromise","getType","isPopup","isIframe","setLocation","setName","frameElement","setAttribute","close","focus","isClosed","matchWindow","_this6","unwrap","awaitWindow","serialize","toProxyWindow","deserialize","methodStore","proxyWindowMethods","listeningForFunctions","listenForFunctionCalls","meth","proxy","serializeFunction","destination","serializeMessage","_serialize","serializers","serializer","serializePromise","deserializeMessage","_deserialize","deserializers","parse","deserializer","serializedPromise","serializedFunction","innerWrapper","opts","function__extends","crossDomainFunctionWrapper","fireAndForget","__name__","__xdomain__","deserializeFunction","SEND_MESSAGE_STRATEGIES","serializedMessage","dom","forEach","postMessage","sendMessage","_serializeMessage","send__extends","messages","strategyName","stringifyError","level","newErr","success","status","join","responseListeners","requestListeners","erroredResponseListeners","WINDOW_WILDCARD","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","winQualifier","nameListeners","domainListeners","_i4","_domainListeners$__DO2","_length4","_ref5","regex","listener","RECEIVE_MESSAGE_TYPES","options","sendResponse","types__extends","pathname","ack","handleError","_RECEIVE_MESSAGE_TYPE","respond","receivedMessages","receiveMessage","event","parsedMessage","receive__typeof","parseMessage","messageListener","messageEvent","sourceElement","originalEvent","requestPromises","request","targetWindow","el","document","getElementById","tagName","HTMLIFrameElement","hasResult","reqPromises","requestPromise","actualParent","_i7","_getAllChildFrames4","getAllChildFrames","_i3","_getFrames2","_i5","_getAllChildFrames2","childFrame","_length6","getTop","_i15","_getFrames8","_length14","isAncestor","awaitWindowHello","actualDomain","responseListener","addResponseListener","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cycleTime","cycle","max","min","markResponseListenerErrored","sendToParent","client","listen","listenerOptions","errorHandler","requestListener","addRequestListener","_ref6","listenersCollection","_i6","_win2","_i8","_length8","_i10","_domain2","_length10","_i12","_length12","existingListener","strDomain","regexListeners","regexListener","onceFunction","errorOnClose","interval","server__typeof","loop","onceListener","disable","removeEventListener","cleanUpWindow","_requestPromises$get2","bridge","initialized","addEventListener","openTunnelToOpener","initHello","INTERFACE"],"mappings":"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","file":"post-robot.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"postRobot\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postRobot\"] = factory();\n\telse\n\t\troot[\"postRobot\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 04269a9d8cdc80a1d08b","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/util.js","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/constants.js","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        noop(obj === obj);  // eslint-disable-line no-self-compare\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        noop(obj && obj.__cross_domain_utils_window_check__);\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/utils.js","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/utils.js","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<*>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/exceptions.js","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/flush.js","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : [*] | [*, *] | [*, *, *] | [*, *, *, *] | [*, *, *, *, *] | [*, *, *, *, *, *] | [*, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *, *] | Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : { [string] : * }>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/promise.js","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-safe-weakmap/src/util.js","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nlet defineProperty = Object.defineProperty;\nlet counter = Date.now() % 1e9;\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        counter += 1;\n\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__${ counter }`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let values = this.values;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                keys.push(key);\n                values.push(value);\n            } else {\n                values[index] = value;\n            }\n\n        } else {\n\n            let name = this.name;\n            let entry = key[name];\n\n            if (entry && entry[0] === key) {\n                entry[1] = value;\n            } else {\n                defineProperty(key, name, {\n                    value:    [ key, value ],\n                    writable: true\n                });\n            }\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                return;\n            }\n\n            return this.values[index];\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return entry[1];\n            }\n        }\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index !== -1) {\n                keys.splice(index, 1);\n                this.values.splice(index, 1);\n            }\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                entry[0] = entry[1] = undefined;\n            }\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let index = safeIndexOf(this.keys, key);\n            return index !== -1;\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return true;\n            }\n\n            return false;\n        }\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-safe-weakmap/src/weakmap.js","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-safe-weakmap/src/native.js","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(str);\n    } else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return window.atob(str);\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs(args : Array<mixed>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoize<R>(method : (...args : Array<any>) => R, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : ((...args : Array<any>) => R) {\n    let cacheMap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedFunction(...args : Array<any>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    }\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = method.apply(this, arguments)\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (typeof err.toString === 'function') {\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && typeof item.toString === 'function') {\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Object | Array<mixed>> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n\n    return thing;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/belter/src/util.js","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    while (documentElement.children && documentElement.children.length) {\n        documentElement.removeChild(documentElement.children[0]);\n    }\n\n    while (el.children.length) {\n        documentElement.appendChild(el.children[0]);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/belter/src/dom.js","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const WINDOW_PROP = {\n    POSTROBOT: ('__postRobot__quiq__' : '__postRobot__quiq__')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const PROTOCOL = {\n    MOCK: ('mock:' : 'mock:'),\n    FILE: ('file:' : 'file:')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/conf/constants.js","/* @flow */\n\nimport { SEND_STRATEGY } from './constants';\n\nexport let CONFIG : Object = {\n    BRIDGE_TIMEOUT:       5000,\n    CHILD_WINDOW_TIMEOUT: 5000,\n\n    ACK_TIMEOUT:       2000,\n    ACK_TIMEOUT_KNOWN: 10000,\n    RES_TIMEOUT:       __TEST__ ? 2000 : -1,\n    \n    ALLOWED_POST_MESSAGE_METHODS: {\n        [ SEND_STRATEGY.POST_MESSAGE ]: true,\n        [ SEND_STRATEGY.BRIDGE ]:       true,\n        [ SEND_STRATEGY.GLOBAL ]:       true\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/conf/config.js","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nimport { WINDOW_PROP } from './conf';\n\nexport let global : Object = window[WINDOW_PROP.POSTROBOT] = window[WINDOW_PROP.POSTROBOT] || {};\nlet winStore = global.windowStore = global.windowStore || new WeakMap();\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType, T) => T) & ((CrossDomainWindowType, void) => T | void),\n    set : (CrossDomainWindowType, T) => T,\n    has : (CrossDomainWindowType) => boolean,\n    del : (CrossDomainWindowType) => void,\n    getOrSet : (CrossDomainWindowType, () => T) => T\n|};\n\ntype ObjectGetter = () => Object;\n\nlet getObj : ObjectGetter = () => ({});\n\n// $FlowFixMe\nexport function windowStore<T>(key : string, defStore? : ObjectGetter = getObj) : WindowStore<T> {\n\n    function getStore(win : CrossDomainWindowType) : ObjectGetter {\n        return winStore.getOrSet(win, defStore);\n    }\n\n    return {\n        has: (win) => {\n            let store = getStore(win);\n            return store.hasOwnProperty(key);\n        },\n        get: (win, defVal) => {\n            let store = getStore(win);\n            // $FlowFixMe\n            return store.hasOwnProperty(key) ? store[key] : defVal;\n        },\n        set: (win, val) => {\n            let store = getStore(win);\n            store[key] = val;\n            return val;\n        },\n        del: (win) => {\n            let store = getStore(win);\n            delete store[key];\n        },\n        getOrSet: (win, getter) => {\n            let store = getStore(win);\n            if (store.hasOwnProperty(key)) {\n                return store[key];\n            }\n            let val = getter();\n            store[key] = val;\n            return val;\n        }\n    };\n}\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : (string, () => T) => T,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\n// $FlowFixMe\nexport function globalStore<T : mixed>(key : string, defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    let store = getOrSet(global, key, defStore);\n\n    return {\n        has: (storeKey) => {\n            return store.hasOwnProperty(storeKey);\n        },\n        get: (storeKey, defVal) => {\n            // $FlowFixMe\n            return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n        },\n        set: (storeKey, val) => {\n            store[storeKey] = val;\n            return val;\n        },\n        del: (storeKey) => {\n            delete store[storeKey];\n        },\n        getOrSet: (storeKey, getter) => {\n            if (store.hasOwnProperty(storeKey)) {\n                return store[storeKey];\n            }\n            let val = getter();\n            store[storeKey] = val;\n            return val;\n        },\n        reset: () => {\n            store = defStore();\n        },\n        keys: () => {\n            return Object.keys(store);\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/global.js","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID, once, weakMapMemoizePromise } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { global, windowStore } from '../global';\n\nglobal.instanceID = global.instanceID || uniqueID();\nlet helloPromises = windowStore('helloPromises');\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nconst listenForHello = once(() => {\n    global.on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: global.instanceID };\n    });\n});\n\nexport function sayHello(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return global.send(win, MESSAGE_NAME.HELLO, { instanceID: global.instanceID }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport let getWindowInstanceID = weakMapMemoizePromise((win : CrossDomainWindowType) : ZalgoPromise<string> => {\n    return sayHello(win).then(({ instanceID }) => instanceID);\n});\n\nexport function initHello() {\n    listenForHello();\n\n    let parent = getAncestor();\n    if (parent) {\n        sayHello(parent).catch(noop);\n    }\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/hello.js","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nlet knownWindows = windowStore('knownWindows');\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    return knownWindows.get(win, false);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/windows.js","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/constants.js","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/common.js","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serialize.js","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/function.js","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/error.js","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/promise.js","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/regex.js","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/date.js","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/array.js","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/object.js","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/string.js","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/number.js","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/boolean.js","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/null.js","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/deserialize.js","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, type DomainMatcher, getOpener, WINDOW_TYPE } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\n\nlet winToProxyWindow = windowStore('winToProxyWindow');\nlet idToProxyWindow = globalStore('idToProxyWindow');\n\nfunction cleanupProxyWindows() {\n    for (let id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedProxyWindow = {|\n    id : string,\n    type : $Values<typeof WINDOW_TYPE>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nexport class ProxyWindow {\n\n    isProxyWindow : true = true\n    serializedWindow : SerializedProxyWindow\n    actualWindow : CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n\n    constructor(serializedWindow : SerializedProxyWindow, actualWindow? : CrossDomainWindowType) {\n        this.serializedWindow = serializedWindow;\n        this.actualWindowPromise = new ZalgoPromise();\n        if (actualWindow) {\n            this.setWindow(actualWindow);\n        }\n        this.serializedWindow.getInstanceID = memoizePromise(this.serializedWindow.getInstanceID);\n    }\n\n    getType() : $Values<typeof WINDOW_TYPE> {\n        return this.serializedWindow.type;\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    isIframe() : boolean {\n        return this.getType() === WINDOW_TYPE.IFRAME;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.location = href;\n            } else {\n                return this.serializedWindow.setLocation(href);\n            }\n        }).then(() => this);\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                if (!isSameDomain(this.actualWindow)) {\n                    throw new Error(`Can not set name for window on different domain`);\n                }\n                // $FlowFixMe\n                this.actualWindow.name = name;\n                // $FlowFixMe\n                if (this.actualWindow.frameElement) {\n                    // $FlowFixMe\n                    this.actualWindow.frameElement.setAttribute('name', name);\n                }\n\n                if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                    const { linkWindow } = require('../bridge');\n                    linkWindow({ win: this.actualWindow, name });\n                }\n\n            } else {\n                return this.serializedWindow.setName(name);\n            }\n        }).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.close();\n            } else {\n                return this.serializedWindow.close();\n            }\n        }).then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.focus();\n            }\n            return this.serializedWindow.focus();\n        }).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return isWindowClosed(this.actualWindow);\n            } else {\n                return this.serializedWindow.isClosed();\n            }\n        });\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(win);\n    }\n\n    matchWindow(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.all([\n                this.getInstanceID(),\n                getWindowInstanceID(win)\n            ]).then(([ proxyInstanceID, knownWindowInstanceID ]) => {\n                let match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        if (this.actualWindow) {\n            return getWindowInstanceID(this.actualWindow);\n        } else {\n            return this.serializedWindow.getInstanceID();\n        }\n    }\n\n    serialize() : SerializedProxyWindow {\n        return this.serializedWindow;\n    }\n\n    shouldClean() : boolean {\n        return this.actualWindow && isWindowClosed(this.actualWindow);\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow) : SerializedProxyWindow {\n        cleanupProxyWindows();\n\n        return ProxyWindow.toProxyWindow(win).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedProxyWindow) : ProxyWindow {\n        cleanupProxyWindows();\n        \n        return idToProxyWindow.getOrSet(serializedWindow.id, () => {\n            return new ProxyWindow(serializedWindow);\n        });\n    }\n\n    static isProxyWindow(obj : mixed) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        return winToProxyWindow.getOrSet(win, () => {\n            let id = uniqueID();\n\n            return idToProxyWindow.set(id, new ProxyWindow({\n                id,\n                // $FlowFixMe\n                type:          getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME,\n                getInstanceID: () => getWindowInstanceID(win),\n                close:         () => ZalgoPromise.try(() => {\n                    win.close();\n                }),\n                focus:         () => ZalgoPromise.try(() => {\n                    win.focus();\n                }),\n                isClosed:      () => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    return isWindowClosed(win);\n                }),\n                setLocation:   (href) => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    if (isSameDomain(win)) {\n                        try {\n                            if (win.location && typeof win.location.replace === 'function') {\n                                // $FlowFixMe\n                                win.location.replace(href);\n                                return;\n                            }\n                        } catch (err) {\n                            // pass\n                        }\n                    }\n    \n                    // $FlowFixMe\n                    win.location = href;\n                }),\n                setName:       (name) => ZalgoPromise.try(() => {\n                    if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                        const { linkWindow } = require('../bridge');\n                        // $FlowFixMe\n                        linkWindow({ win, name });\n                    }\n                    // $FlowFixMe\n                    win.name = name;\n                })\n            // $FlowFixMe\n            }, win));\n        });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedProxyWindow>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedProxyWindow) : ProxyWindow {\n    return ProxyWindow.deserialize(win);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/serialize/window.js","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, uniqueID } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { global, windowStore, globalStore } from '../global';\n\nimport { ProxyWindow } from './window';\n\nlet methodStore = windowStore('methodStore');\nlet proxyWindowMethods = globalStore('proxyWindowMethods');\nglobal.listeningForFunctions = global.listeningForFunctions || false;\n\nconst listenForFunctionCalls = once(() => {\n    if (global.listeningForFunctions) {\n        return;\n    }\n\n    global.listeningForFunctions = true;\n\n    global.on(MESSAGE_NAME.METHOD, { origin: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n        let { id, name } = data;\n        \n        return ZalgoPromise.try(() => {\n            let methods = methodStore.getOrSet(source, () => ({}));\n            let meth = methods[data.id] || proxyWindowMethods.get(id);\n\n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            let { proxy, domain, val } = meth;\n\n            if (!matchDomain(domain, origin)) {\n                throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n            }\n            \n            if (proxy) {\n                // $FlowFixMe\n                return proxy.matchWindow(source).then(match => {\n                    if (!match) {\n                        throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                    }\n                    return val;\n                });\n            }\n\n            return val;\n\n        }).then(method => {\n            return method.apply({ source, origin, data }, data.args);\n\n        }).then(result => {\n            return { result, id, name };\n        });\n    });\n});\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : () => ZalgoPromise<T> | T, key : string) : SerializedFunction {\n    listenForFunctionCalls();\n    \n    let id = uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        proxyWindowMethods.set(id, { proxy: destination, domain, val });\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            proxyWindowMethods.del(id);\n            let methods = methodStore.getOrSet(win, () => ({}));\n            methods[id] = { domain, val };\n        });\n    } else {\n        // $FlowFixMe\n        let methods = methodStore.getOrSet(destination, () => ({}));\n        methods[id] = { domain, val };\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name: val.name || key });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    function innerWrapper<X : mixed>(args : $ReadOnlyArray<mixed>, opts? : Object = {}) : ZalgoPromise<X> {\n        let originalStack;\n\n        if (__DEBUG__) {\n            originalStack = (new Error(`Original call to ${ name }():`)).stack;\n        }\n\n        return ZalgoPromise.try(() => {\n            // $FlowFixMe\n            return ProxyWindow.isProxyWindow(source) ? source.awaitWindow() : source;\n        }).then(win => {\n            return global.send(win, MESSAGE_NAME.METHOD, { id, name, args }, { domain: origin, ...opts });\n        }).catch(err => {\n            // $FlowFixMe\n            if (__DEBUG__ && originalStack && err.stack) {\n                // $FlowFixMe\n                err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n            }\n            throw err;\n        });\n    }\n\n    function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n        return innerWrapper(Array.prototype.slice.call(arguments))\n            .then(({ data }) => data.result);\n    }\n\n    crossDomainFunctionWrapper.fireAndForget = function crossDomainFireAndForgetFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n        return innerWrapper(Array.prototype.slice.call(arguments), { fireAndForget: true });\n    };\n\n    crossDomainFunctionWrapper.__name__ = name;\n    crossDomainFunctionWrapper.__xdomain__ = true;\n    crossDomainFunctionWrapper.origin = origin;\n\n    return crossDomainFunctionWrapper;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/serialize/function.js","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow)\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/serialize/serialize.js","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key)\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/serialize/promise.js","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, PROTOCOL, WILDCARD, WINDOW_PROP } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\n\nexport let SEND_MESSAGE_STRATEGIES = {};\n\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n\n            if (window.location.protocol === PROTOCOL.FILE) {\n                return WILDCARD;\n            }\n\n            if (!isActuallySameDomain(win)) {\n                throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n            }\n\n            // $FlowFixMe\n            return getActualDomain(win);\n        }\n\n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        return win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    let { sendBridgeMessage, needsBridgeForBrowser, isBridge } = require('../../bridge');\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        return sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        let foreignGlobal = win[WINDOW_PROP.POSTROBOT];\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        return foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/send/strategies.js","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { MESSAGE_TYPE, CONFIG, MESSAGE_NAME, WILDCARD, WINDOW_PROP } from '../../conf';\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nfunction logMessage(domain : string | $ReadOnlyArray<string>, message : Message) {\n    if (__DEBUG__) {\n        let level;\n\n        if (Object.keys(MESSAGE_NAME).map(key => MESSAGE_NAME[key]).indexOf(message.name) !== -1 || message.type === MESSAGE_TYPE.ACK) {\n            level = 'debug';\n        } else if (message.ack === 'error') {\n            level = 'error';\n        } else {\n            level = 'info';\n        }\n\n        // eslint-disable-next-line no-console\n        if (typeof console !== 'undefined' && typeof console[level] === 'function') {\n            // eslint-disable-next-line no-console\n            console[level]('postrobot_send', message.type.replace(/^postrobot_message_/, ''), '::', message.name, '::', domain || WILDCARD, '\\n\\n', message);\n        }\n    }\n}\n\nexport function sendMessage(win : CrossDomainWindowType, domain : string | $ReadOnlyArray<string>, message : Message) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n\n        if (isWindowClosed(win)) {\n            throw new Error('Window is closed');\n        }\n\n        logMessage(domain, message);\n\n        const serializedMessage = serializeMessage(win, domain, {\n            [ WINDOW_PROP.POSTROBOT ]: {\n                id: uniqueID(),\n                ...message\n            }\n        });\n\n\n        let messages = [];\n\n        return ZalgoPromise.map(Object.keys(SEND_MESSAGE_STRATEGIES), strategyName => {\n\n            return ZalgoPromise.try(() => {\n\n                if (!CONFIG.ALLOWED_POST_MESSAGE_METHODS[strategyName]) {\n                    throw new Error(`Strategy disallowed: ${ strategyName }`);\n                }\n\n                return SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n\n            }).then(() => {\n                messages.push(`${ strategyName }: success`);\n                return true;\n            }, err => {\n                messages.push(`${ strategyName }: ${ stringifyError(err) }\\n`);\n                return false;\n            });\n\n        }).then(results => {\n\n            let success = results.some(Boolean);\n            let status = `${ message.type } ${ message.name } ${ success ? 'success' : 'error' }:\\n  - ${ messages.join('\\n  - ') }\\n`;\n\n            if (!success) {\n                throw new Error(status);\n            }\n        });\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/send/index.js","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { global, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nlet responseListeners = globalStore('responseListeners');\nlet requestListeners = windowStore('requestListeners');\nlet erroredResponseListeners = globalStore('erroredResponseListeners');\n\nexport function resetListeners() {\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nglobal.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new (function WindowWildcard() { /* pass */ })();\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n};\n\nexport type ResponseListenerType = {\n    name : string,\n    window : CrossDomainWindowType,\n    domain : DomainMatcher,\n    respond : (err : ?mixed, result : ?mixed) => void,\n    ack? : ?boolean\n};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    responseListeners.del(hash);\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?CrossDomainWindowType, domain : ?(string | RegExp) }) : ?RequestListenerType {\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (let winQualifier of [ win, global.WINDOW_WILDCARD ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        let nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        let domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (let { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?CrossDomainWindowType, domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        let listenersCollection = [];\n\n        for (let item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (let cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        let listenersCollection = [];\n\n        for (let item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (let cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    let existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = global.WINDOW_WILDCARD;\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === global.WINDOW_WILDCARD ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === global.WINDOW_WILDCARD ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    let nameListeners = requestListeners.getOrSet(win, () => ({}));\n    // $FlowFixMe\n    let domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    let strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                // $FlowFixMe\n                delete nameListeners[name];\n            }\n\n            // $FlowFixMe\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/listeners.js","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\n\nexport let RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage) : ZalgoPromise<void> {\n\n        let options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, data = {}) : ZalgoPromise<void> {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return ZalgoPromise.resolve();\n            }\n\n            // $FlowFixMe\n            return sendMessage(source, origin, {\n                type,\n                hash:   message.hash,\n                name:   message.name,\n                ...data\n            });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                let data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, {\n                    ack:  MESSAGE_ACK.SUCCESS,\n                    data\n                });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, {\n                    ack:  MESSAGE_ACK.ERROR,\n                    error\n                });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        let options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        let options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            return options.respond(message.error, null);\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            let data = message.data;\n            return options.respond(null, { source, origin, data });\n        }\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/receive/types.js","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { MESSAGE_NAME, WINDOW_PROP, MESSAGE_TYPE } from '../../conf';\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { global, globalStore } from '../../global';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nlet receivedMessages = globalStore('receivedMessages');\n\ntype MessageEvent = {\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string\n};\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string) : ?Object {\n\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message);\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[WINDOW_PROP.POSTROBOT];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\n\nexport function receiveMessage(event : MessageEvent) {\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    let message = parseMessage(data, source, origin);\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (__DEBUG__) {\n        let level;\n\n        if (Object.keys(MESSAGE_NAME).map(key => MESSAGE_NAME[key]).indexOf(message.name) !== -1 || message.type === MESSAGE_TYPE.ACK) {\n            level = 'debug';\n        } else if (message.ack === 'error') {\n            level = 'error';\n        } else {\n            level = 'info';\n        }\n\n        // eslint-disable-next-line no-console\n        if (typeof console !== 'undefined' && typeof console[level] === 'function') {\n            // eslint-disable-next-line no-console\n            console[level]('postrobot_receive', message.type.replace(/^postrobot_message_/, ''), '::', message.name, '::', origin, '\\n\\n', message);\n        }\n    }\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message);\n}\n\nexport function messageListener(event : { source : CrossDomainWindowType, origin : string, data : string, sourceElement : CrossDomainWindowType, originalEvent? : { origin : string } }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    // $FlowFixMe\n    let messageEvent : MessageEvent = {\n        source: event.source || event.sourceElement,\n        origin: event.origin || (event.originalEvent && event.originalEvent.origin),\n        data:   event.data\n    };\n\n    if (!messageEvent.source) {\n        return;\n    }\n\n    if (!messageEvent.origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(messageEvent.source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage(messageEvent);\n}\n\nexport function listenForMessages() {\n    // $FlowFixMe\n    addEventListener(window, 'message', messageListener);\n}\n\nglobal.receiveMessage = receiveMessage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/receive/index.js","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getAncestor, isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex } from 'belter/src';\n\n\nimport { CONFIG, MESSAGE_TYPE, WILDCARD } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { global, windowStore } from '../global';\n\nexport let requestPromises = windowStore('requestPromises');\n\ntype WindowResolverType = CrossDomainWindowType | string | HTMLIFrameElement;\n\ntype RequestOptionsType = {\n    window? : ?WindowResolverType,\n    domain? : ?DomainMatcher,\n    name? : ?string,\n    data? : ?Object,\n    fireAndForget? : ?boolean,\n    timeout? : ?number\n};\n\ntype ResponseMessageEvent = {\n    source : CrossDomainWindowType,\n    origin : string,\n    data : Object\n};\n\nexport function request(options : RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n\n    let prom = ZalgoPromise.try(() => {\n\n        if (!options.name) {\n            throw new Error('Expected options.name');\n        }\n\n        let name = options.name;\n        let targetWindow : ?CrossDomainWindowType;\n        let domain : DomainMatcher;\n\n        if (typeof options.window === 'string') {\n            let el = document.getElementById(options.window);\n\n            if (!el) {\n                throw new Error(`Expected options.window ${ Object.prototype.toString.call(options.window) } to be a valid element id`);\n            }\n\n            if (el.tagName.toLowerCase() !== 'iframe') {\n                throw new Error(`Expected options.window ${ Object.prototype.toString.call(options.window) } to be an iframe`);\n            }\n\n            // $FlowFixMe\n            if (!el.contentWindow) {\n                throw new Error('Iframe must have contentWindow.  Make sure it has a src attribute and is in the DOM.');\n            }\n\n            // $FlowFixMe\n            targetWindow = el.contentWindow;\n\n        } else if (options.window instanceof HTMLIFrameElement) {\n\n            if (options.window.tagName.toLowerCase() !== 'iframe') {\n                throw new Error(`Expected options.window ${ Object.prototype.toString.call(options.window) } to be an iframe`);\n            }\n\n            if (options.window && !options.window.contentWindow) {\n                throw new Error('Iframe must have contentWindow.  Make sure it has a src attribute and is in the DOM.');\n            }\n\n            if (options.window && options.window.contentWindow) {\n                // $FlowFixMe\n                targetWindow = options.window.contentWindow;\n            }\n        } else {\n            targetWindow = options.window;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Expected options.window to be a window object, iframe, or iframe element id.');\n        }\n\n        const win = targetWindow;\n\n        domain = options.domain || WILDCARD;\n\n        let hash = `${ options.name }_${ uniqueID() }`;\n\n        if (isWindowClosed(win)) {\n            throw new Error('Target window is closed');\n        }\n\n        let hasResult = false;\n\n        let reqPromises = requestPromises.getOrSet(win, () => []);\n\n        let requestPromise = ZalgoPromise.try(() => {\n\n            if (isAncestor(window, win)) {\n                return awaitWindowHello(win, options.timeout || CONFIG.CHILD_WINDOW_TIMEOUT);\n            }\n\n        }).then(({ domain: origin } = {}) => {\n\n            if (isRegex(domain) && !origin) {\n                return sayHello(win);\n            }\n\n        }).then(({ domain: origin } = {}) => {\n\n            if (isRegex(domain)) {\n                if (!matchDomain(domain, origin)) {\n                    throw new Error(`Remote window domain ${ origin } does not match regex: ${ domain.toString() }`);\n                }\n\n                domain = origin;\n            }\n\n            if (typeof domain !== 'string' && !Array.isArray(domain)) {\n                throw new TypeError(`Expected domain to be a string or array`);\n            }\n\n            const actualDomain = domain;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                let responseListener : ResponseListenerType;\n\n                if (!options.fireAndForget) {\n                    responseListener = {\n                        name,\n                        window: win,\n                        domain: actualDomain,\n                        respond(err, result) {\n                            if (!err) {\n                                hasResult = true;\n                                reqPromises.splice(reqPromises.indexOf(requestPromise, 1));\n                            }\n\n                            if (err) {\n                                reject(err);\n                            } else {\n                                resolve(result);\n                            }\n                        }\n                    };\n\n                    addResponseListener(hash, responseListener);\n                }\n\n                sendMessage(win, actualDomain, {\n                    type:          MESSAGE_TYPE.REQUEST,\n                    hash,\n                    name,\n                    data:          options.data,\n                    fireAndForget: Boolean(options.fireAndForget)\n                }).catch(reject);\n\n                if (options.fireAndForget) {\n                    return resolve();\n                }\n\n                let totalAckTimeout = isWindowKnown(win) ? CONFIG.ACK_TIMEOUT_KNOWN : CONFIG.ACK_TIMEOUT;\n                let totalResTimeout = options.timeout || CONFIG.RES_TIMEOUT;\n\n                let ackTimeout = totalAckTimeout;\n                let resTimeout = totalResTimeout;\n\n                let cycleTime = 100;\n\n                let cycle = () => {\n\n                    if (hasResult) {\n                        return;\n                    }\n\n                    if (isWindowClosed(win)) {\n\n                        if (!responseListener.ack) {\n                            return reject(new Error(`Window closed for ${ name } before ack`));\n                        }\n\n                        return reject(new Error(`Window closed for ${ name } before response`));\n                    }\n\n                    ackTimeout = Math.max(ackTimeout - cycleTime, 0);\n                    if (resTimeout !== -1) {\n                        resTimeout = Math.max(resTimeout - cycleTime, 0);\n                    }\n\n                    let hasAck = responseListener.ack;\n\n                    if (hasAck) {\n\n                        if (resTimeout === -1) {\n                            return;\n                        }\n\n                        cycleTime = Math.min(resTimeout, 2000);\n\n                    } else if (ackTimeout === 0) {\n                        return reject(new Error(`No ack for postMessage ${ name } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                    } else if (resTimeout === 0) {\n                        return reject(new Error(`No response for postMessage ${ name } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                    }\n\n                    setTimeout(cycle, cycleTime);\n                };\n\n                setTimeout(cycle, cycleTime);\n            });\n        });\n\n        requestPromise.catch(() => {\n            markResponseListenerErrored(hash);\n            deleteResponseListener(hash);\n        });\n\n        reqPromises.push(requestPromise);\n\n        return requestPromise;\n    });\n\n    return prom;\n}\n\nexport function send(window : WindowResolverType, name : string, data : ?Object, options : ?RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n\n    options = options || {};\n    options.window = window;\n    options.name = name;\n    options.data = data;\n\n    return request(options);\n}\n\nexport function sendToParent(name : string, data : ?Object, options : ?RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n\n    let win = getAncestor();\n\n    if (!win) {\n        return new ZalgoPromise((resolve, reject) => reject(new Error('Window does not have a parent')));\n    }\n\n    return send(win, name, data, options);\n}\n\nexport function client(options : RequestOptionsType = {}) : { send : (string, ?Object) => ZalgoPromise<ResponseMessageEvent> } {\n\n    if (!options.window) {\n        throw new Error(`Expected options.window`);\n    }\n\n    const win = options.window;\n\n    return {\n        send(name : string, data : ?Object) : ZalgoPromise<ResponseMessageEvent> {\n            return send(win, name, data, options);\n        }\n    };\n}\n\nglobal.send = send;\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/client.js","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once as onceFunction, safeInterval } from 'belter/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport { global } from '../global';\n\ntype ErrorHandlerType = (err : mixed) => void;\ntype HandlerType = ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (void | mixed | ZalgoPromise<mixed>);\n\ntype ServerOptionsType = {\n    handler? : ?HandlerType,\n    errorHandler? : ?ErrorHandlerType,\n    window? : CrossDomainWindowType,\n    name? : ?string,\n    domain? : ?DomainMatcher,\n    once? : ?boolean,\n    errorOnClose? : ?boolean\n};\n\nexport function listen(options : ServerOptionsType) : { cancel : () => void } {\n\n    if (!options.name) {\n        throw new Error('Expected options.name');\n    }\n\n    if (!options.handler) {\n        throw new Error('Expected options.handler');\n    }\n\n    const name = options.name;\n    const win = options.window;\n    const domain = options.domain;\n\n    let listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    let requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    if (options.once) {\n        let handler = listenerOptions.handler;\n        listenerOptions.handler = onceFunction(function listenOnce() : mixed | ZalgoPromise<mixed> {\n            requestListener.cancel();\n            return handler.apply(this, arguments);\n        });\n    }\n\n    if (listenerOptions.window && options.errorOnClose) {\n        let interval = safeInterval(() => {\n            if (win && typeof win === 'object' && isWindowClosed(win)) {\n                interval.cancel();\n                listenerOptions.handleError(new Error('Post message target window is closed'));\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : { cancel : () => void } {\n\n    if (typeof options === 'function') {\n        handler = options;\n        options = {};\n    }\n\n    options = options || {};\n\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    return listen(options);\n}\n\nexport function once(name : string, options : ?(ServerOptionsType | HandlerType) = {}, handler : ?HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n\n    if (typeof options === 'function') {\n        handler = options;\n        options = {};\n    }\n\n    options = options || {};\n    handler = handler || options.handler;\n    let errorHandler = options.errorHandler;\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n\n        options = options || {};\n\n        options.name = name;\n        options.once = true;\n\n        options.handler = (event) => {\n            resolve(event);\n            if (handler) {\n                return handler(event);\n            }\n        };\n\n        options.errorHandler = (err) => {\n            reject(err);\n            if (errorHandler) {\n                return errorHandler(err);\n            }\n        };\n    });\n\n    let onceListener = listen(options);\n    promise.cancel = onceListener.cancel;\n\n    return promise;\n}\n\nexport function listener(options : ServerOptionsType = {}) : { on : (name : string, handler : HandlerType) => { cancel : () => void } } {\n\n    return {\n        on(name : string, handler : HandlerType) : { cancel : () => void } {\n            return on(name, options, handler);\n        }\n    };\n}\n\nglobal.on = on;\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/server.js","/* @flow */\n\nimport { WINDOW_PROP } from '../conf';\nimport { messageListener } from '../drivers';\n\nexport { CONFIG } from '../conf';\n\nexport function disable() {\n    delete window[WINDOW_PROP.POSTROBOT];\n    window.removeEventListener('message', messageListener);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/config.js","/* @flow */\n\nimport { getAncestor } from 'cross-domain-utils/src';\n\nexport * from './client';\nexport * from './server';\nexport * from './config';\n\nexport let parent = getAncestor();\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/index.js","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { requestPromises } from './public';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    for (let promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clean.js","/* @flow */\n\nimport { initHello } from './lib';\nimport { listenForMessages } from './drivers';\nimport { global } from './global';\n\nexport * from './public';\nexport { markWindowKnown } from './lib';\nexport { serializeMessage, deserializeMessage, ProxyWindow } from './serialize';\nexport { cleanUpWindow } from './clean';\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\nexport let bridge = __POST_ROBOT__.__IE_POPUP_SUPPORT__ ? require('./bridge/interface') : null;\n\nif (!global.initialized) {\n    global.initialized = true;\n\n    listenForMessages();\n\n    if (bridge) {\n        bridge.openTunnelToOpener();\n    }\n\n    initHello();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/interface.js","/* @flow */\n\n// eslint-disable-next-line import/no-namespace\nimport * as INTERFACE from './interface';\n\nexport * from './interface';\nexport default INTERFACE;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}