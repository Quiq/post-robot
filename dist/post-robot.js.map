{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 72fe39a687ab9e8512a8","webpack:///./node_modules/cross-domain-utils/src/util.js","webpack:///./node_modules/cross-domain-utils/src/constants.js","webpack:///./node_modules/cross-domain-utils/src/utils.js","webpack:///./node_modules/zalgo-promise/src/utils.js","webpack:///./node_modules/zalgo-promise/src/exceptions.js","webpack:///./node_modules/zalgo-promise/src/flush.js","webpack:///./node_modules/zalgo-promise/src/promise.js","webpack:///./node_modules/cross-domain-safe-weakmap/src/util.js","webpack:///./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack:///./node_modules/cross-domain-safe-weakmap/src/native.js","webpack:///./node_modules/belter/src/util.js","webpack:///./node_modules/belter/src/dom.js","webpack:///./src/conf/constants.js","webpack:///./src/conf/config.js","webpack:///./src/global.js","webpack:///./src/lib/hello.js","webpack:///./src/lib/windows.js","webpack:///./node_modules/universal-serialize/src/constants.js","webpack:///./node_modules/universal-serialize/src/common.js","webpack:///./node_modules/universal-serialize/src/serialize.js","webpack:///./node_modules/universal-serialize/src/serializers/function.js","webpack:///./node_modules/universal-serialize/src/serializers/error.js","webpack:///./node_modules/universal-serialize/src/serializers/promise.js","webpack:///./node_modules/universal-serialize/src/serializers/regex.js","webpack:///./node_modules/universal-serialize/src/serializers/date.js","webpack:///./node_modules/universal-serialize/src/serializers/array.js","webpack:///./node_modules/universal-serialize/src/serializers/object.js","webpack:///./node_modules/universal-serialize/src/serializers/string.js","webpack:///./node_modules/universal-serialize/src/serializers/number.js","webpack:///./node_modules/universal-serialize/src/serializers/boolean.js","webpack:///./node_modules/universal-serialize/src/serializers/null.js","webpack:///./node_modules/universal-serialize/src/deserialize.js","webpack:///./src/serialize/window.js","webpack:///./src/serialize/function.js","webpack:///./src/serialize/serialize.js","webpack:///./src/serialize/promise.js","webpack:///./src/drivers/send/strategies.js","webpack:///./src/drivers/send/index.js","webpack:///./src/drivers/listeners.js","webpack:///./src/drivers/receive/types.js","webpack:///./src/drivers/receive/index.js","webpack:///./src/public/client.js","webpack:///./src/public/server.js","webpack:///./src/public/config.js","webpack:///./src/public/index.js","webpack:///./src/clean.js","webpack:///./src/interface.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","isRegex","item","toString","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","IE_WIN_ACCESS_ERROR","isAboutProtocol","arguments","length","undefined","window","location","protocol","getParent","win","parent","err","getOpener","opener","canReadFromWindow","href","getActualDomain","Error","host","getDomain","domain","mockDomain","indexOf","isActuallySameDomain","desc","getOwnPropertyDescriptor","isSameDomain","isAncestorParent","child","childParent","result","push","getParents","getFrames","frames","len","frame","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","top","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getAncestor","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","isWindow","obj","Window","__cross_domain_utils_window_check__","isPromise","Promise","constructor","then","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushPromise","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","_this","_classCallCheck","resolved","rejected","errorHandled","handlers","error","isAsync","res","reject","value","dispatch","_this2","setTimeout","j","dispatchPossiblyUnhandledError","asyncReject","_this3","dispatching","_loop","_handlers$i","onSuccess","onError","onFinally","timeout","time","_this4","clearTimeout","toPromise","TypeError","all","promises","count","results","_loop2","prom","hash","keys","map","key","items","method","onPossiblyUnhandledException","cancel","splice","context","args","apply","delay","flush","Zalgo","awaitActive","counter","Date","now","CrossDomainSafeWeakMap","weakmap__classCallCheck","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","weakmap","values","_cleanupClosedWindows","isSafeToReadWrite","entry","writable","index","has","getOrSet","uniqueID","chars","replace","charAt","floor","str","btoa","Buffer","from","base64encode","toISOString","slice","toLowerCase","objectIDs","noop","once","called","val","create","MESSAGE_TYPE","REQUEST","RESPONSE","ACK","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","WINDOW_PROP","POSTROBOT","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","CONFIG","BRIDGE_TIMEOUT","CHILD_WINDOW_TIMEOUT","ACK_TIMEOUT","ACK_TIMEOUT_KNOWN","RES_TIMEOUT","ALLOWED_POST_MESSAGE_METHODS","_ALLOWED_POST_MESSAGE","global","winStore","windowStore","getObj","defStore","getStore","defVal","store","del","globalStore","storeKey","reset","instanceID","helloPromises","getHelloPromise","listenForHello","on","_ref","source","sayHello","send","_ref2","data","getWindowInstanceID","_ref3","arg","_this5","knownWindows","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","common__typeof","__type__","determineType","serializeType","type","__val__","SERIALIZER","_SERIALIZER","stack","code","toJSON","defaultSerializers","DESERIALIZER","_DESERIALIZER","RegExp","defaultDeserializers","winToProxyWindow","idToProxyWindow","cleanupProxyWindows","_i2","_idToProxyWindow$keys2","_length2","id","shouldClean","ProxyWindow","serializedWindow","actualWindow","window__classCallCheck","isProxyWindow","actualWindowPromise","setWindow","getInstanceID","cache","memoizedPromiseFunction","_len2","_key2","subkey","_typeof","uid","getObjectID","serializeArgs","memoizePromise","getType","isPopup","isIframe","setLocation","setName","frameElement","setAttribute","close","focus","isClosed","matchWindow","_this6","unwrap","awaitWindow","serialize","toProxyWindow","deserialize","methodStore","proxyWindowMethods","listeningForFunctions","listenForFunctionCalls","meth","proxy","serializeFunction","destination","serializeMessage","_serialize","serializers","serializer","serializePromise","deserializeMessage","_deserialize","deserializers","parse","deserializer","serializedPromise","serializedFunction","innerWrapper","opts","function__extends","crossDomainFunctionWrapper","fireAndForget","__name__","__xdomain__","deserializeFunction","SEND_MESSAGE_STRATEGIES","serializedMessage","dom","forEach","postMessage","sendMessage","_serializeMessage","send__extends","messages","strategyName","stringifyError","level","newErr","success","status","join","responseListeners","requestListeners","erroredResponseListeners","WINDOW_WILDCARD","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","winQualifier","nameListeners","domainListeners","_i4","_domainListeners$__DO2","_length4","_ref5","regex","listener","RECEIVE_MESSAGE_TYPES","options","sendResponse","types__extends","pathname","ack","handleError","_RECEIVE_MESSAGE_TYPE","respond","receivedMessages","receiveMessage","event","parsedMessage","receive__typeof","parseMessage","messageListener","messageEvent","sourceElement","originalEvent","requestPromises","request","targetWindow","el","document","getElementById","tagName","HTMLIFrameElement","hasResult","reqPromises","requestPromise","actualParent","_i7","_getAllChildFrames4","getAllChildFrames","_i3","_getFrames2","_i5","_getAllChildFrames2","childFrame","_length6","getTop","_i15","_getFrames8","_length14","isAncestor","awaitWindowHello","actualDomain","responseListener","addResponseListener","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cycleTime","cycle","max","min","markResponseListenerErrored","sendToParent","client","listen","listenerOptions","errorHandler","requestListener","addRequestListener","_ref6","listenersCollection","_i6","_win2","_i8","_length8","_i10","_domain2","_length10","_i12","_length12","existingListener","strDomain","regexListeners","regexListener","onceFunction","errorOnClose","interval","loop","server__typeof","safeInterval","onceListener","disable","removeEventListener","cleanUpWindow","_requestPromises$get2","bridge","initialized","addEventListener","openTunnelToOpener","initHello","INTERFACE"],"mappings":"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","file":"post-robot.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"postRobot\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postRobot\"] = factory();\n\telse\n\t\troot[\"postRobot\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 72fe39a687ab9e8512a8","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/util.js","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/constants.js","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        noop(obj === obj);  // eslint-disable-line no-self-compare\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        noop(obj && obj.__cross_domain_utils_window_check__);\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-utils/src/utils.js","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/utils.js","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<*>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/exceptions.js","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/flush.js","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : [*] | [*, *] | [*, *, *] | [*, *, *, *] | [*, *, *, *, *] | [*, *, *, *, *, *] | [*, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *, *] | Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : { [string] : * }>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/zalgo-promise/src/promise.js","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-safe-weakmap/src/util.js","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nlet defineProperty = Object.defineProperty;\nlet counter = Date.now() % 1e9;\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        counter += 1;\n\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__${ counter }`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let values = this.values;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                keys.push(key);\n                values.push(value);\n            } else {\n                values[index] = value;\n            }\n\n        } else {\n\n            let name = this.name;\n            let entry = key[name];\n\n            if (entry && entry[0] === key) {\n                entry[1] = value;\n            } else {\n                defineProperty(key, name, {\n                    value:    [ key, value ],\n                    writable: true\n                });\n            }\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                return;\n            }\n\n            return this.values[index];\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return entry[1];\n            }\n        }\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index !== -1) {\n                keys.splice(index, 1);\n                this.values.splice(index, 1);\n            }\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                entry[0] = entry[1] = undefined;\n            }\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let index = safeIndexOf(this.keys, key);\n            return index !== -1;\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return true;\n            }\n\n            return false;\n        }\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-safe-weakmap/src/weakmap.js","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/cross-domain-safe-weakmap/src/native.js","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(str);\n    } else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return window.atob(str);\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs(args : Array<mixed>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoize<R>(method : (...args : Array<any>) => R, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : ((...args : Array<any>) => R) {\n    let cacheMap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedFunction(...args : Array<any>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    }\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = method.apply(this, arguments)\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (typeof err.toString === 'function') {\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && typeof item.toString === 'function') {\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Object | Array<mixed>> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n\n    return thing;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/belter/src/util.js","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    while (documentElement.children && documentElement.children.length) {\n        documentElement.removeChild(documentElement.children[0]);\n    }\n\n    while (el.children.length) {\n        documentElement.appendChild(el.children[0]);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/belter/src/dom.js","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const WINDOW_PROP = {\n    POSTROBOT: ('__postRobot__quiq__' : '__postRobot__quiq__')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const PROTOCOL = {\n    MOCK: ('mock:' : 'mock:'),\n    FILE: ('file:' : 'file:')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/conf/constants.js","/* @flow */\n\nimport { SEND_STRATEGY } from './constants';\n\nexport let CONFIG : Object = {\n    BRIDGE_TIMEOUT:       5000,\n    CHILD_WINDOW_TIMEOUT: 5000,\n\n    ACK_TIMEOUT:       2000,\n    ACK_TIMEOUT_KNOWN: 10000,\n    RES_TIMEOUT:       __TEST__ ? 2000 : -1,\n    \n    ALLOWED_POST_MESSAGE_METHODS: {\n        [ SEND_STRATEGY.POST_MESSAGE ]: true,\n        [ SEND_STRATEGY.BRIDGE ]:       true,\n        [ SEND_STRATEGY.GLOBAL ]:       true\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/conf/config.js","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nimport { WINDOW_PROP } from './conf';\n\nexport let global : Object = window[WINDOW_PROP.POSTROBOT] = window[WINDOW_PROP.POSTROBOT] || {};\nlet winStore = global.windowStore = global.windowStore || new WeakMap();\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType, T) => T) & ((CrossDomainWindowType, void) => T | void),\n    set : (CrossDomainWindowType, T) => T,\n    has : (CrossDomainWindowType) => boolean,\n    del : (CrossDomainWindowType) => void,\n    getOrSet : (CrossDomainWindowType, () => T) => T\n|};\n\ntype ObjectGetter = () => Object;\n\nlet getObj : ObjectGetter = () => ({});\n\n// $FlowFixMe\nexport function windowStore<T>(key : string, defStore? : ObjectGetter = getObj) : WindowStore<T> {\n\n    function getStore(win : CrossDomainWindowType) : ObjectGetter {\n        return winStore.getOrSet(win, defStore);\n    }\n\n    return {\n        has: (win) => {\n            let store = getStore(win);\n            return store.hasOwnProperty(key);\n        },\n        get: (win, defVal) => {\n            let store = getStore(win);\n            // $FlowFixMe\n            return store.hasOwnProperty(key) ? store[key] : defVal;\n        },\n        set: (win, val) => {\n            let store = getStore(win);\n            store[key] = val;\n            return val;\n        },\n        del: (win) => {\n            let store = getStore(win);\n            delete store[key];\n        },\n        getOrSet: (win, getter) => {\n            let store = getStore(win);\n            if (store.hasOwnProperty(key)) {\n                return store[key];\n            }\n            let val = getter();\n            store[key] = val;\n            return val;\n        }\n    };\n}\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : (string, () => T) => T,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\n// $FlowFixMe\nexport function globalStore<T : mixed>(key : string, defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    let store = getOrSet(global, key, defStore);\n\n    return {\n        has: (storeKey) => {\n            return store.hasOwnProperty(storeKey);\n        },\n        get: (storeKey, defVal) => {\n            // $FlowFixMe\n            return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n        },\n        set: (storeKey, val) => {\n            store[storeKey] = val;\n            return val;\n        },\n        del: (storeKey) => {\n            delete store[storeKey];\n        },\n        getOrSet: (storeKey, getter) => {\n            if (store.hasOwnProperty(storeKey)) {\n                return store[storeKey];\n            }\n            let val = getter();\n            store[storeKey] = val;\n            return val;\n        },\n        reset: () => {\n            store = defStore();\n        },\n        keys: () => {\n            return Object.keys(store);\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/global.js","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID, once, weakMapMemoizePromise } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { global, windowStore } from '../global';\n\nglobal.instanceID = global.instanceID || uniqueID();\nlet helloPromises = windowStore('helloPromises');\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nconst listenForHello = once(() => {\n    global.on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: global.instanceID };\n    });\n});\n\nexport function sayHello(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return global.send(win, MESSAGE_NAME.HELLO, { instanceID: global.instanceID }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport let getWindowInstanceID = weakMapMemoizePromise((win : CrossDomainWindowType) : ZalgoPromise<string> => {\n    return sayHello(win).then(({ instanceID }) => instanceID);\n});\n\nexport function initHello() {\n    listenForHello();\n\n    let parent = getAncestor();\n    if (parent) {\n        sayHello(parent).catch(noop);\n    }\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/hello.js","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nlet knownWindows = windowStore('knownWindows');\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    return knownWindows.get(win, false);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/windows.js","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/constants.js","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/common.js","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serialize.js","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/function.js","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/error.js","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/promise.js","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/regex.js","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/date.js","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/array.js","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/object.js","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/string.js","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/number.js","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/boolean.js","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/serializers/null.js","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/universal-serialize/src/deserialize.js","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, type DomainMatcher, getOpener, WINDOW_TYPE } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\n\nlet winToProxyWindow = windowStore('winToProxyWindow');\nlet idToProxyWindow = globalStore('idToProxyWindow');\n\nfunction cleanupProxyWindows() {\n    for (let id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedProxyWindow = {|\n    id : string,\n    type : $Values<typeof WINDOW_TYPE>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nexport class ProxyWindow {\n\n    isProxyWindow : true = true\n    serializedWindow : SerializedProxyWindow\n    actualWindow : CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n\n    constructor(serializedWindow : SerializedProxyWindow, actualWindow? : CrossDomainWindowType) {\n        this.serializedWindow = serializedWindow;\n        this.actualWindowPromise = new ZalgoPromise();\n        if (actualWindow) {\n            this.setWindow(actualWindow);\n        }\n        this.serializedWindow.getInstanceID = memoizePromise(this.serializedWindow.getInstanceID);\n    }\n\n    getType() : $Values<typeof WINDOW_TYPE> {\n        return this.serializedWindow.type;\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    isIframe() : boolean {\n        return this.getType() === WINDOW_TYPE.IFRAME;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.location = href;\n            } else {\n                return this.serializedWindow.setLocation(href);\n            }\n        }).then(() => this);\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                if (!isSameDomain(this.actualWindow)) {\n                    throw new Error(`Can not set name for window on different domain`);\n                }\n                // $FlowFixMe\n                this.actualWindow.name = name;\n                // $FlowFixMe\n                if (this.actualWindow.frameElement) {\n                    // $FlowFixMe\n                    this.actualWindow.frameElement.setAttribute('name', name);\n                }\n\n                if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                    const { linkWindow } = require('../bridge');\n                    linkWindow({ win: this.actualWindow, name });\n                }\n\n            } else {\n                return this.serializedWindow.setName(name);\n            }\n        }).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.close();\n            } else {\n                return this.serializedWindow.close();\n            }\n        }).then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.focus();\n            }\n            return this.serializedWindow.focus();\n        }).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return isWindowClosed(this.actualWindow);\n            } else {\n                return this.serializedWindow.isClosed();\n            }\n        });\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(win);\n    }\n\n    matchWindow(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.all([\n                this.getInstanceID(),\n                getWindowInstanceID(win)\n            ]).then(([ proxyInstanceID, knownWindowInstanceID ]) => {\n                let match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        if (this.actualWindow) {\n            return getWindowInstanceID(this.actualWindow);\n        } else {\n            return this.serializedWindow.getInstanceID();\n        }\n    }\n\n    serialize() : SerializedProxyWindow {\n        return this.serializedWindow;\n    }\n\n    shouldClean() : boolean {\n        return this.actualWindow && isWindowClosed(this.actualWindow);\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow) : SerializedProxyWindow {\n        cleanupProxyWindows();\n\n        return ProxyWindow.toProxyWindow(win).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedProxyWindow) : ProxyWindow {\n        cleanupProxyWindows();\n        \n        return idToProxyWindow.getOrSet(serializedWindow.id, () => {\n            return new ProxyWindow(serializedWindow);\n        });\n    }\n\n    static isProxyWindow(obj : mixed) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        return winToProxyWindow.getOrSet(win, () => {\n            let id = uniqueID();\n\n            return idToProxyWindow.set(id, new ProxyWindow({\n                id,\n                // $FlowFixMe\n                type:          getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME,\n                getInstanceID: () => getWindowInstanceID(win),\n                close:         () => ZalgoPromise.try(() => {\n                    win.close();\n                }),\n                focus:         () => ZalgoPromise.try(() => {\n                    win.focus();\n                }),\n                isClosed:      () => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    return isWindowClosed(win);\n                }),\n                setLocation:   (href) => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    if (isSameDomain(win)) {\n                        try {\n                            if (win.location && typeof win.location.replace === 'function') {\n                                // $FlowFixMe\n                                win.location.replace(href);\n                                return;\n                            }\n                        } catch (err) {\n                            // pass\n                        }\n                    }\n    \n                    // $FlowFixMe\n                    win.location = href;\n                }),\n                setName:       (name) => ZalgoPromise.try(() => {\n                    if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                        const { linkWindow } = require('../bridge');\n                        // $FlowFixMe\n                        linkWindow({ win, name });\n                    }\n                    // $FlowFixMe\n                    win.name = name;\n                })\n            // $FlowFixMe\n            }, win));\n        });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedProxyWindow>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedProxyWindow) : ProxyWindow {\n    return ProxyWindow.deserialize(win);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/serialize/window.js","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, uniqueID } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { global, windowStore, globalStore } from '../global';\n\nimport { ProxyWindow } from './window';\n\nlet methodStore = windowStore('methodStore');\nlet proxyWindowMethods = globalStore('proxyWindowMethods');\nglobal.listeningForFunctions = global.listeningForFunctions || false;\n\nconst listenForFunctionCalls = once(() => {\n    if (global.listeningForFunctions) {\n        return;\n    }\n\n    global.listeningForFunctions = true;\n\n    global.on(MESSAGE_NAME.METHOD, { origin: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n        let { id, name } = data;\n        \n        return ZalgoPromise.try(() => {\n            let methods = methodStore.getOrSet(source, () => ({}));\n            let meth = methods[data.id] || proxyWindowMethods.get(id);\n\n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            let { proxy, domain, val } = meth;\n\n            if (!matchDomain(domain, origin)) {\n                throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n            }\n            \n            if (proxy) {\n                // $FlowFixMe\n                return proxy.matchWindow(source).then(match => {\n                    if (!match) {\n                        throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                    }\n                    return val;\n                });\n            }\n\n            return val;\n\n        }).then(method => {\n            return method.apply({ source, origin, data }, data.args);\n\n        }).then(result => {\n            return { result, id, name };\n        });\n    });\n});\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : () => ZalgoPromise<T> | T, key : string) : SerializedFunction {\n    listenForFunctionCalls();\n    \n    let id = uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        proxyWindowMethods.set(id, { proxy: destination, domain, val });\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            proxyWindowMethods.del(id);\n            let methods = methodStore.getOrSet(win, () => ({}));\n            methods[id] = { domain, val };\n        });\n    } else {\n        // $FlowFixMe\n        let methods = methodStore.getOrSet(destination, () => ({}));\n        methods[id] = { domain, val };\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name: val.name || key });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    function innerWrapper<X : mixed>(args : $ReadOnlyArray<mixed>, opts? : Object = {}) : ZalgoPromise<X> {\n        let originalStack;\n\n        if (__DEBUG__) {\n            originalStack = (new Error(`Original call to ${ name }():`)).stack;\n        }\n\n        return ZalgoPromise.try(() => {\n            // $FlowFixMe\n            return ProxyWindow.isProxyWindow(source) ? source.awaitWindow() : source;\n        }).then(win => {\n            return global.send(win, MESSAGE_NAME.METHOD, { id, name, args }, { domain: origin, ...opts });\n        }).catch(err => {\n            // $FlowFixMe\n            if (__DEBUG__ && originalStack && err.stack) {\n                // $FlowFixMe\n                err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n            }\n            throw err;\n        });\n    }\n\n    function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n        return innerWrapper(Array.prototype.slice.call(arguments))\n            .then(({ data }) => data.result);\n    }\n\n    crossDomainFunctionWrapper.fireAndForget = function crossDomainFireAndForgetFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n        return innerWrapper(Array.prototype.slice.call(arguments), { fireAndForget: true });\n    };\n\n    crossDomainFunctionWrapper.__name__ = name;\n    crossDomainFunctionWrapper.__xdomain__ = true;\n    crossDomainFunctionWrapper.origin = origin;\n\n    return crossDomainFunctionWrapper;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/serialize/function.js","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow)\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/serialize/serialize.js","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key)\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/serialize/promise.js","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, PROTOCOL, WILDCARD, WINDOW_PROP } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\n\nexport let SEND_MESSAGE_STRATEGIES = {};\n\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n\n            if (window.location.protocol === PROTOCOL.FILE) {\n                return WILDCARD;\n            }\n\n            if (!isActuallySameDomain(win)) {\n                throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n            }\n\n            // $FlowFixMe\n            return getActualDomain(win);\n        }\n\n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        return win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    let { sendBridgeMessage, needsBridgeForBrowser, isBridge } = require('../../bridge');\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        return sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        let foreignGlobal = win[WINDOW_PROP.POSTROBOT];\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        return foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/send/strategies.js","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { MESSAGE_TYPE, CONFIG, MESSAGE_NAME, WILDCARD, WINDOW_PROP } from '../../conf';\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nfunction logMessage(domain : string | $ReadOnlyArray<string>, message : Message) {\n    if (__DEBUG__) {\n        let level;\n\n        if (Object.keys(MESSAGE_NAME).map(key => MESSAGE_NAME[key]).indexOf(message.name) !== -1 || message.type === MESSAGE_TYPE.ACK) {\n            level = 'debug';\n        } else if (message.ack === 'error') {\n            level = 'error';\n        } else {\n            level = 'info';\n        }\n\n        // eslint-disable-next-line no-console\n        if (typeof console !== 'undefined' && typeof console[level] === 'function') {\n            // eslint-disable-next-line no-console\n            console[level]('postrobot_send', message.type.replace(/^postrobot_message_/, ''), '::', message.name, '::', domain || WILDCARD, '\\n\\n', message);\n        }\n    }\n}\n\nexport function sendMessage(win : CrossDomainWindowType, domain : string | $ReadOnlyArray<string>, message : Message) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n\n        if (isWindowClosed(win)) {\n            throw new Error('Window is closed');\n        }\n\n        logMessage(domain, message);\n\n        const serializedMessage = serializeMessage(win, domain, {\n            [ WINDOW_PROP.POSTROBOT ]: {\n                id: uniqueID(),\n                ...message\n            }\n        });\n\n\n        let messages = [];\n\n        return ZalgoPromise.map(Object.keys(SEND_MESSAGE_STRATEGIES), strategyName => {\n\n            return ZalgoPromise.try(() => {\n\n                if (!CONFIG.ALLOWED_POST_MESSAGE_METHODS[strategyName]) {\n                    throw new Error(`Strategy disallowed: ${ strategyName }`);\n                }\n\n                return SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n\n            }).then(() => {\n                messages.push(`${ strategyName }: success`);\n                return true;\n            }, err => {\n                messages.push(`${ strategyName }: ${ stringifyError(err) }\\n`);\n                return false;\n            });\n\n        }).then(results => {\n\n            let success = results.some(Boolean);\n            let status = `${ message.type } ${ message.name } ${ success ? 'success' : 'error' }:\\n  - ${ messages.join('\\n  - ') }\\n`;\n\n            if (!success) {\n                throw new Error(status);\n            }\n        });\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/send/index.js","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { global, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nlet responseListeners = globalStore('responseListeners');\nlet requestListeners = windowStore('requestListeners');\nlet erroredResponseListeners = globalStore('erroredResponseListeners');\n\nexport function resetListeners() {\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nglobal.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new (function WindowWildcard() { /* pass */ })();\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n};\n\nexport type ResponseListenerType = {\n    name : string,\n    window : CrossDomainWindowType,\n    domain : DomainMatcher,\n    respond : (err : ?mixed, result : ?mixed) => void,\n    ack? : ?boolean\n};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    responseListeners.del(hash);\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?CrossDomainWindowType, domain : ?(string | RegExp) }) : ?RequestListenerType {\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (let winQualifier of [ win, global.WINDOW_WILDCARD ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        let nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        let domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (let { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?CrossDomainWindowType, domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        let listenersCollection = [];\n\n        for (let item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (let cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        let listenersCollection = [];\n\n        for (let item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (let cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    let existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = global.WINDOW_WILDCARD;\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === global.WINDOW_WILDCARD ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === global.WINDOW_WILDCARD ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    let nameListeners = requestListeners.getOrSet(win, () => ({}));\n    // $FlowFixMe\n    let domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    let strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                // $FlowFixMe\n                delete nameListeners[name];\n            }\n\n            // $FlowFixMe\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/listeners.js","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\n\nexport let RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage) : ZalgoPromise<void> {\n\n        let options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, data = {}) : ZalgoPromise<void> {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return ZalgoPromise.resolve();\n            }\n\n            // $FlowFixMe\n            return sendMessage(source, origin, {\n                type,\n                hash:   message.hash,\n                name:   message.name,\n                ...data\n            });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                let data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, {\n                    ack:  MESSAGE_ACK.SUCCESS,\n                    data\n                });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, {\n                    ack:  MESSAGE_ACK.ERROR,\n                    error\n                });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        let options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        let options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            return options.respond(message.error, null);\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            let data = message.data;\n            return options.respond(null, { source, origin, data });\n        }\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/receive/types.js","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { MESSAGE_NAME, WINDOW_PROP, MESSAGE_TYPE } from '../../conf';\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { global, globalStore } from '../../global';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nlet receivedMessages = globalStore('receivedMessages');\n\ntype MessageEvent = {\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string\n};\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string) : ?Object {\n\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message);\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[WINDOW_PROP.POSTROBOT];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\n\nexport function receiveMessage(event : MessageEvent) {\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    let message = parseMessage(data, source, origin);\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (__DEBUG__) {\n        let level;\n\n        if (Object.keys(MESSAGE_NAME).map(key => MESSAGE_NAME[key]).indexOf(message.name) !== -1 || message.type === MESSAGE_TYPE.ACK) {\n            level = 'debug';\n        } else if (message.ack === 'error') {\n            level = 'error';\n        } else {\n            level = 'info';\n        }\n\n        // eslint-disable-next-line no-console\n        if (typeof console !== 'undefined' && typeof console[level] === 'function') {\n            // eslint-disable-next-line no-console\n            console[level]('postrobot_receive', message.type.replace(/^postrobot_message_/, ''), '::', message.name, '::', origin, '\\n\\n', message);\n        }\n    }\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message);\n}\n\nexport function messageListener(event : { source : CrossDomainWindowType, origin : string, data : string, sourceElement : CrossDomainWindowType, originalEvent? : { origin : string } }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    // $FlowFixMe\n    let messageEvent : MessageEvent = {\n        source: event.source || event.sourceElement,\n        origin: event.origin || (event.originalEvent && event.originalEvent.origin),\n        data:   event.data\n    };\n\n    if (!messageEvent.source) {\n        return;\n    }\n\n    if (!messageEvent.origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(messageEvent.source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage(messageEvent);\n}\n\nexport function listenForMessages() {\n    // $FlowFixMe\n    addEventListener(window, 'message', messageListener);\n}\n\nglobal.receiveMessage = receiveMessage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/drivers/receive/index.js","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getAncestor, isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex } from 'belter/src';\n\n\nimport { CONFIG, MESSAGE_TYPE, WILDCARD } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { global, windowStore } from '../global';\n\nexport let requestPromises = windowStore('requestPromises');\n\ntype WindowResolverType = CrossDomainWindowType | string | HTMLIFrameElement;\n\ntype RequestOptionsType = {\n    window? : ?WindowResolverType,\n    domain? : ?DomainMatcher,\n    name? : ?string,\n    data? : ?Object,\n    fireAndForget? : ?boolean,\n    timeout? : ?number\n};\n\ntype ResponseMessageEvent = {\n    source : CrossDomainWindowType,\n    origin : string,\n    data : Object\n};\n\nexport function request(options : RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n\n    let prom = ZalgoPromise.try(() => {\n\n        if (!options.name) {\n            throw new Error('Expected options.name');\n        }\n\n        let name = options.name;\n        let targetWindow : ?CrossDomainWindowType;\n        let domain : DomainMatcher;\n\n        if (typeof options.window === 'string') {\n            let el = document.getElementById(options.window);\n\n            if (!el) {\n                throw new Error(`Expected options.window ${ Object.prototype.toString.call(options.window) } to be a valid element id`);\n            }\n\n            if (el.tagName.toLowerCase() !== 'iframe') {\n                throw new Error(`Expected options.window ${ Object.prototype.toString.call(options.window) } to be an iframe`);\n            }\n\n            // $FlowFixMe\n            if (!el.contentWindow) {\n                throw new Error('Iframe must have contentWindow.  Make sure it has a src attribute and is in the DOM.');\n            }\n\n            // $FlowFixMe\n            targetWindow = el.contentWindow;\n\n        } else if (options.window instanceof HTMLIFrameElement) {\n\n            if (options.window.tagName.toLowerCase() !== 'iframe') {\n                throw new Error(`Expected options.window ${ Object.prototype.toString.call(options.window) } to be an iframe`);\n            }\n\n            if (options.window && !options.window.contentWindow) {\n                throw new Error('Iframe must have contentWindow.  Make sure it has a src attribute and is in the DOM.');\n            }\n\n            if (options.window && options.window.contentWindow) {\n                // $FlowFixMe\n                targetWindow = options.window.contentWindow;\n            }\n        } else {\n            targetWindow = options.window;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Expected options.window to be a window object, iframe, or iframe element id.');\n        }\n\n        const win = targetWindow;\n\n        domain = options.domain || WILDCARD;\n\n        let hash = `${ options.name }_${ uniqueID() }`;\n\n        if (isWindowClosed(win)) {\n            throw new Error('Target window is closed');\n        }\n\n        let hasResult = false;\n\n        let reqPromises = requestPromises.getOrSet(win, () => []);\n\n        let requestPromise = ZalgoPromise.try(() => {\n\n            if (isAncestor(window, win)) {\n                return awaitWindowHello(win, options.timeout || CONFIG.CHILD_WINDOW_TIMEOUT);\n            }\n\n        }).then(({ domain: origin } = {}) => {\n\n            if (isRegex(domain) && !origin) {\n                return sayHello(win);\n            }\n\n        }).then(({ domain: origin } = {}) => {\n\n            if (isRegex(domain)) {\n                if (!matchDomain(domain, origin)) {\n                    throw new Error(`Remote window domain ${ origin } does not match regex: ${ domain.toString() }`);\n                }\n\n                domain = origin;\n            }\n\n            if (typeof domain !== 'string' && !Array.isArray(domain)) {\n                throw new TypeError(`Expected domain to be a string or array`);\n            }\n\n            const actualDomain = domain;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                let responseListener : ResponseListenerType;\n\n                if (!options.fireAndForget) {\n                    responseListener = {\n                        name,\n                        window: win,\n                        domain: actualDomain,\n                        respond(err, result) {\n                            if (!err) {\n                                hasResult = true;\n                                reqPromises.splice(reqPromises.indexOf(requestPromise, 1));\n                            }\n\n                            if (err) {\n                                reject(err);\n                            } else {\n                                resolve(result);\n                            }\n                        }\n                    };\n\n                    addResponseListener(hash, responseListener);\n                }\n\n                sendMessage(win, actualDomain, {\n                    type:          MESSAGE_TYPE.REQUEST,\n                    hash,\n                    name,\n                    data:          options.data,\n                    fireAndForget: Boolean(options.fireAndForget)\n                }).catch(reject);\n\n                if (options.fireAndForget) {\n                    return resolve();\n                }\n\n                let totalAckTimeout = isWindowKnown(win) ? CONFIG.ACK_TIMEOUT_KNOWN : CONFIG.ACK_TIMEOUT;\n                let totalResTimeout = options.timeout || CONFIG.RES_TIMEOUT;\n\n                let ackTimeout = totalAckTimeout;\n                let resTimeout = totalResTimeout;\n\n                let cycleTime = 100;\n\n                let cycle = () => {\n\n                    if (hasResult) {\n                        return;\n                    }\n\n                    if (isWindowClosed(win)) {\n\n                        if (!responseListener.ack) {\n                            return reject(new Error(`Window closed for ${ name } before ack`));\n                        }\n\n                        return reject(new Error(`Window closed for ${ name } before response`));\n                    }\n\n                    ackTimeout = Math.max(ackTimeout - cycleTime, 0);\n                    if (resTimeout !== -1) {\n                        resTimeout = Math.max(resTimeout - cycleTime, 0);\n                    }\n\n                    let hasAck = responseListener.ack;\n\n                    if (hasAck) {\n\n                        if (resTimeout === -1) {\n                            return;\n                        }\n\n                        cycleTime = Math.min(resTimeout, 2000);\n\n                    } else if (ackTimeout === 0) {\n                        return reject(new Error(`No ack for postMessage ${ name } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                    } else if (resTimeout === 0) {\n                        return reject(new Error(`No response for postMessage ${ name } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                    }\n\n                    setTimeout(cycle, cycleTime);\n                };\n\n                setTimeout(cycle, cycleTime);\n            });\n        });\n\n        requestPromise.catch(() => {\n            markResponseListenerErrored(hash);\n            deleteResponseListener(hash);\n        });\n\n        reqPromises.push(requestPromise);\n\n        return requestPromise;\n    });\n\n    return prom;\n}\n\nexport function send(window : WindowResolverType, name : string, data : ?Object, options : ?RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n\n    options = options || {};\n    options.window = window;\n    options.name = name;\n    options.data = data;\n\n    return request(options);\n}\n\nexport function sendToParent(name : string, data : ?Object, options : ?RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n\n    let win = getAncestor();\n\n    if (!win) {\n        return new ZalgoPromise((resolve, reject) => reject(new Error('Window does not have a parent')));\n    }\n\n    return send(win, name, data, options);\n}\n\nexport function client(options : RequestOptionsType = {}) : { send : (string, ?Object) => ZalgoPromise<ResponseMessageEvent> } {\n\n    if (!options.window) {\n        throw new Error(`Expected options.window`);\n    }\n\n    const win = options.window;\n\n    return {\n        send(name : string, data : ?Object) : ZalgoPromise<ResponseMessageEvent> {\n            return send(win, name, data, options);\n        }\n    };\n}\n\nglobal.send = send;\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/client.js","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once as onceFunction, safeInterval } from 'belter/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport { global } from '../global';\n\ntype ErrorHandlerType = (err : mixed) => void;\ntype HandlerType = ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (void | mixed | ZalgoPromise<mixed>);\n\ntype ServerOptionsType = {\n    handler? : ?HandlerType,\n    errorHandler? : ?ErrorHandlerType,\n    window? : CrossDomainWindowType,\n    name? : ?string,\n    domain? : ?DomainMatcher,\n    once? : ?boolean,\n    errorOnClose? : ?boolean\n};\n\nexport function listen(options : ServerOptionsType) : { cancel : () => void } {\n\n    if (!options.name) {\n        throw new Error('Expected options.name');\n    }\n\n    if (!options.handler) {\n        throw new Error('Expected options.handler');\n    }\n\n    const name = options.name;\n    const win = options.window;\n    const domain = options.domain;\n\n    let listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    let requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    if (options.once) {\n        let handler = listenerOptions.handler;\n        listenerOptions.handler = onceFunction(function listenOnce() : mixed | ZalgoPromise<mixed> {\n            requestListener.cancel();\n            return handler.apply(this, arguments);\n        });\n    }\n\n    if (listenerOptions.window && options.errorOnClose) {\n        let interval = safeInterval(() => {\n            if (win && typeof win === 'object' && isWindowClosed(win)) {\n                interval.cancel();\n                listenerOptions.handleError(new Error('Post message target window is closed'));\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : { cancel : () => void } {\n\n    if (typeof options === 'function') {\n        handler = options;\n        options = {};\n    }\n\n    options = options || {};\n\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    return listen(options);\n}\n\nexport function once(name : string, options : ?(ServerOptionsType | HandlerType) = {}, handler : ?HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n\n    if (typeof options === 'function') {\n        handler = options;\n        options = {};\n    }\n\n    options = options || {};\n    handler = handler || options.handler;\n    let errorHandler = options.errorHandler;\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n\n        options = options || {};\n\n        options.name = name;\n        options.once = true;\n\n        options.handler = (event) => {\n            resolve(event);\n            if (handler) {\n                return handler(event);\n            }\n        };\n\n        options.errorHandler = (err) => {\n            reject(err);\n            if (errorHandler) {\n                return errorHandler(err);\n            }\n        };\n    });\n\n    let onceListener = listen(options);\n    promise.cancel = onceListener.cancel;\n\n    return promise;\n}\n\nexport function listener(options : ServerOptionsType = {}) : { on : (name : string, handler : HandlerType) => { cancel : () => void } } {\n\n    return {\n        on(name : string, handler : HandlerType) : { cancel : () => void } {\n            return on(name, options, handler);\n        }\n    };\n}\n\nglobal.on = on;\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/server.js","/* @flow */\n\nimport { WINDOW_PROP } from '../conf';\nimport { messageListener } from '../drivers';\n\nexport { CONFIG } from '../conf';\n\nexport function disable() {\n    delete window[WINDOW_PROP.POSTROBOT];\n    window.removeEventListener('message', messageListener);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/config.js","/* @flow */\n\nimport { getAncestor } from 'cross-domain-utils/src';\n\nexport * from './client';\nexport * from './server';\nexport * from './config';\n\nexport let parent = getAncestor();\n\n\n\n// WEBPACK FOOTER //\n// ./src/public/index.js","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { requestPromises } from './public';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    for (let promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/clean.js","/* @flow */\n\nimport { initHello } from './lib';\nimport { listenForMessages } from './drivers';\nimport { global } from './global';\n\nexport * from './public';\nexport { markWindowKnown } from './lib';\nexport { serializeMessage, deserializeMessage, ProxyWindow } from './serialize';\nexport { cleanUpWindow } from './clean';\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\nexport let bridge = __POST_ROBOT__.__IE_POPUP_SUPPORT__ ? require('./bridge/interface') : null;\n\nif (!global.initialized) {\n    global.initialized = true;\n\n    listenForMessages();\n\n    if (bridge) {\n        bridge.openTunnelToOpener();\n    }\n\n    initHello();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/interface.js","/* @flow */\n\n// eslint-disable-next-line import/no-namespace\nimport * as INTERFACE from './interface';\n\nexport * from './interface';\nexport default INTERFACE;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}